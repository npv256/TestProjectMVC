@model PagedList.IPagedList<Domain.Teacher>

@{
    ViewBag.Title = "Teachers";
}

<h2>All TEACHERS</h2>

@using (Html.BeginForm())
{
    <p>
        Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
    <select name="minFilter">
        <option value="" selected="selected">Min Students count</option>
        <option value="1">
            1
        </option>
        <option value="3">
            3
        </option>
        <option value="6">
            6
        </option>
        <option value="9">
           9
        </option>
        <option value="12">
            12
        </option>
    </select>

    <select name="maxFilter">
        <option value="" selected="selected">Max Students Count</option>
        <option value="3">
            3
        </option>
        <option value="6">
            6
        </option>
        <option value="12">
            12
        </option>
        <option value="18">
            18
        </option>
        <option value="24">
            24
        </option>
    </select>
}
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("First Name", "TeacherListIndex", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter, minFilter = ViewBag.minFilter, maxFilter = ViewBag.maxFilter })
        </th>
        <th>
            @Html.ActionLink("Last Name", "TeacherListIndex", new { sortOrder = ViewBag.LastNameSortParm, currentFilter = ViewBag.CurrentFilter, minFilter = ViewBag.minFilter, maxFilter = ViewBag.maxFilter })
        </th>
        <th>
            @Html.ActionLink("Science", "TeacherListIndex", new { sortOrder = ViewBag.ScienceSortParm, currentFilter = ViewBag.CurrentFilter, minFilter = ViewBag.minFilter, maxFilter = ViewBag.maxFilter })
        </th>
        <th>
            @Html.ActionLink("Students count", "TeacherListIndex", new { sortOrder = ViewBag.CountSortParm, currentFilter = ViewBag.CurrentFilter, minFilter = ViewBag.minFilter, maxFilter = ViewBag.maxFilter })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Science.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Science.Students.Count)
            </td>
        </tr>
    }
</table>

<div>
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
    of @Model.PageCount

    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("<<", "TeacherListIndex", new { page = 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, minFilter = ViewBag.minFilter, maxFilter = ViewBag.maxFilter })
        @Html.Raw(" ")
        ;
        @Html.ActionLink("< Prev", "TeacherListIndex", new { page = Model.PageNumber - 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, minFilter = ViewBag.minFilter, maxFilter = ViewBag.maxFilter })
    }
    else
    {
        @:<<
        @Html.Raw(" ")
        ;
        @:< Prev
        }

    @if (Model.HasNextPage)
    {
        @Html.ActionLink("Next >", "TeacherListIndex", new { page = Model.PageNumber + 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, minFilter = ViewBag.minFilter, maxFilter = ViewBag.maxFilter })
        @Html.Raw(" ")
        ;
        @Html.ActionLink(">>", "TeacherListIndex", new { page = Model.PageCount, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, minFilter = ViewBag.minFilter, maxFilter = ViewBag.maxFilter })
    }
    else
    {
        @:Next >
        @Html.Raw(" ")
        @:>>
        }
</div>